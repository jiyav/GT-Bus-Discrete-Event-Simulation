import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Random;

public class Passenger {
    //IMPORTANT: passengers are generated by the createPassengers() method in ArriveAtBusStopEvent.java
    //Please refer to createPassenger() documentation for more info on Passenger objects

    /*---------------------Instance variables unique to each Passenger instance---------------- */
    
    /*
     * Time in the simulation when the passenger is created, or "spawned" and
     * positioned at its start bus stop
     */
    private int timeOfArrivalToStop;
    
    /*
     * Time in the simulation when the passenger gets on the bus
     * Basically how long a passenger had to wait after being created to onboard the bus
     */
    private int timeOfGettingOnBus;

    /*
     * Time in the simulation when the passenger gets on the bus
     * Basically how long a passenger had to wait after being created to onboard the bus
     */
    private int timeOfDepartureFromBus; 

    /*
     * passenger's assigned starting stop.
     * passengers are randomly assigned a start stop based on the popularity scores of bus stops
     * in createPassenger()
     */
    private BusStop startStop;

    /* passenger's randomly selected bus type (out of the buses that go to this stop)
     * once the start stop has been selected, a passenger will also be assigned a bus type that goes
     * to the start stop.
     * 
     */
    private String busType;

    /*
     * passener's assigned ending stop
     * once the start stop has been selected, a passenger will also be assigned a bus type that goes
     * to the start stop. a passenger can then choose to go to any of the stops (except the current one)
     * that the bus goes to according to its route
     * 
     */
    private BusStop endStop;

    /*
     * initially false, set to true once passenger arrives to destination stop
     */
    private boolean hasArrived; 

    /*
     * a passenger's unique id. set to the current total passenger count in the simulation
     */
    private int id; 

    /*
     * if a passenger is in a bus when the bus driver stops to take a break, passenger must get off
     * at a "detour" stop on the route and wait for the next bus of this type or until bus is done t
     * taking break. numDetours keeps track of the total # of times a passenger was forced to detour
     * before getting off at its stop
     * 
     * in the real world, passengers would likely just leave/walk to their destination,
     * but for the purpose of our simulation/data analysis we forced all passengers to stay on the 
     * bus until completing their path
     */
    private int numDetours;
    
    /*------------------Static/Class-Level Variables shared by all Passenger instances------------ 
     * These are reset/emptied at the end of each simulation so the previous values are not carried over
    */
    
    /* important data collection point
     * stores all of the passengers objects and their instance variable values once they 
     * arrive to their stop and are "deleted" from the simulation
     */
    public static ArrayList<ArrayList<Passenger>> deadPassengers = new ArrayList<>();

    /*
     * key: hour of the day
     * value: # of passengers to generate. Represents how busy passenger traffic is at a given hour
     * everytime an ArriveAtBusStopEvent is processed, this map tells
     * tells createPassengers() how many passengers to generate based on the current hour range the 
     * simulation clock time is in
     * 
     * passengers are NOT created at an hourly basis, but are rather created/spawned every time an
     * ArriveAtBusStopEvent is processed, and the # of passengers generated are based on this map
     * 
     * a higher value for an hour key would inject passengers at a greater density
     * into the simulation in that hour
     */
    private static Map<Integer, Integer> passengerTraffic = new HashMap<>();

    /* 
     * keeps track of the # of passengers in the simulation, incremented when a passenger is created
     * This value is assigned to a passenger object's id to ensure each passenger has a unique id
     */
    public static int numPassengers = 0;
    
    /*-----------------------------------------constructors-------------------------------------- */
    /*
     * constructor that assigns a passenger its start stop, end stop, bus type, and time of arrival
     * increments numPassengers each time new passenger is created and sets id to this value
     * num detours set to 0
     */
    public Passenger(BusStop startStop, BusStop endStop, int timeOfArrivalToStop, String busType) {
        this.startStop = startStop;
        this.endStop = endStop;
        this.timeOfArrivalToStop = timeOfArrivalToStop;
        this.busType = busType;
        numDetours = 0;
        numPassengers++;
        id = numPassengers;
    }

    //no inits or utility methods in  Passenger.java 

    /*-------------------------------getters and setters-------------------------------------- */
    public String getBusType() {
        return this.busType;
    }

    public void setBusType(String busType) {
        this.busType = busType;
    }

    public int getNumDetours() {
        return this.numDetours;
    }

    public void setNumDetours(int numDetours) {
        this.numDetours = numDetours;
    }


    public static Map<Integer, Integer> getPassengerTraffic() {
        return passengerTraffic;
    }

    public static void setPassengerTraffic(Map<Integer, Integer> passengerTraffic) {
        Passenger.passengerTraffic = passengerTraffic;
    }
    
    public static void addToDeadPassengerList(ArrayList<Passenger> dead) {
        deadPassengers.add(dead);
    }

    public String getBus() {
        return busType;
    }

    public void setBus(String busType) {
        this.busType = busType;
    }

    public int getTimeOfArrivalToStop() {
        return this.timeOfArrivalToStop;
    }

    public void setTimeOfArrivalToStop(int timeOfArrivalToStop) {
        this.timeOfArrivalToStop = timeOfArrivalToStop;
    }

    public int getTimeOfGettingOnBus() {
        return this.timeOfGettingOnBus;
    }

    public void setTimeOfGettingOnBus(int timeOfGettingOnBus) {
        this.timeOfGettingOnBus = timeOfGettingOnBus;
    }

    public int getTimeOfDepartureFromBus() {
        return this.timeOfDepartureFromBus;
    }

    public void setTimeOfDepartureFromBus(int timeOfDepartureFromBus) {
        this.timeOfDepartureFromBus = timeOfDepartureFromBus;
    }

    public BusStop getStartStop() {
        return this.startStop;
    }

    public void setStartStop(BusStop startStop) {
        this.startStop = startStop;
    }

    public BusStop getEndStop() {
        return this.endStop;
    }

    public void setEndStop(BusStop endStop) {
        this.endStop = endStop;
    }

    public boolean isHasArrived() {
        return this.hasArrived;
    }

    public boolean getHasArrived() {
        return this.hasArrived;
    }

    public void setHasArrived(boolean hasArrived) {
        this.hasArrived = hasArrived;
    }

    public int getId() {
        return this.id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public static ArrayList<ArrayList<Passenger>> getDeadPassengers() {
        return Passenger.deadPassengers;
    }



}